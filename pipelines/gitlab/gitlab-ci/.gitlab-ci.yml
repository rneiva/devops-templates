# Multi-stage Pipeline + WebHook Discord - NodeJS Pipeline
variables:
    TAG_LATEST_PRD: "prd-latest"
    TAG_LATEST_HML: "hml-latest"
    APP_NAME: <project>
    IMAGE_NAME: <image_name>
    DOCKER_TLS_CERTDIR: "/certs"

.rules-test: &rules-test
  only:
  - master

.ci-prd: &ci-prd
  only:
  - master
  tags:
  - docker

.ci-hml: &ci-hml
  only:
  - stage
  tags:
  - docker

.notification: &notification
  only:
  - master
  - stage
  tags:
  - shell-executor

.dedicated-nodejs: &dedicated-nodejs
  tags:
  - nodejs

stages:
  - build-deps
  - test
  - build
  - deploy
  - notification

install_dependencies:
  <<: *dedicated-nodejs
  <<: *rules-test
  stage: build-deps
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths:
      - node_modules/  
  artifacts:
    name: $CI_PROJECT_NAME
    when: always
    paths:
      - src/
  script:
    - npm install
  
test_nodejs:
  <<: *dedicated-nodejs
  <<: *rules-test
  stage: test
  image: node:16
  needs: ["install_dependencies"]
  before_script:
    - npm i --save-dev jest-cli
  script:
    - npm test -- -c jest-unit-config.js
  allow_failure: true

### PRODUCTION ###
build_prod:
  <<: *ci-prd
  stage: build
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  services:
    - docker:20.10.15-dind
  needs: ["test_nodejs"]
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths:
      - node_modules/
  artifacts:
    paths:
      - build
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
    - docker --version
  script:
    - echo "Building image..."
    - echo "$ENV_FILE_PRD" > .env 
    - cat .env
    - docker build -t ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-${TAG_LATEST_PRD} .
    - echo "Tagging image..."
    - IMAGE_TAG="${CI_COMMIT_SHORT_SHA}"
    - docker tag ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-${TAG_LATEST_PRD} ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-$IMAGE_TAG
    - echo "Pushing image..."
    - docker push ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-${TAG_LATEST_PRD}
    - docker push ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-${IMAGE_TAG}

deploy_prod:
  <<: *ci-prd
  stage: deploy
  needs: ["build_prod"]
  variables:
    STACK_FILE: <stack>.yml
    STACK_NAME: <stack_name>
  image: docker:latest
  before_script:
    - apk add --update --no-cache python3 py3-pip
    - pip install awscli
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
  script:
    - echo "Deploy at Swarm-Cluster..."
    - docker stack deploy -c ${CI_PROJECT_DIR}/${STACK_FILE} ${STACK_NAME} --with-registry-auth
  environment:
    name: Producao
    url: http://myapp.com.br
  allow_failure: false

### HOMOLOG ###
build_homl:
  <<: *ci-hml
  stage: build
  image:
    name: amazon/aws-cli:latest
    entrypoint: [""]
  services:
    - docker:20.10.15-dind
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths:
      - node_modules/
  artifacts:
    paths:
      - build
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
    - docker --version
  script:
    - echo "Building image..."
    - echo "$ENV_FILE_HML" > .env  
    - cat .env
    - docker build -t ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-${TAG_LATEST_HML} .
    - echo "Tagging image..."
    - IMAGE_TAG="${CI_COMMIT_SHORT_SHA}"
    - docker tag ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-${TAG_LATEST_HML} ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-$IMAGE_TAG
    - echo "Pushing image..."
    - docker push ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-${TAG_LATEST_HML}
    - docker push ${DOCKER_REGISTRY}/${APP_NAME}:${IMAGE_NAME}-${IMAGE_TAG}

deploy_homl:
  <<: *ci-hml
  stage: deploy
  needs: ["build_homl"]
  variables:
    STACK_FILE: <stack>.yml
    STACK_NAME: <stack_name>
  image: docker:latest
  before_script:
    - apk add --update --no-cache python3 py3-pip
    - pip install awscli
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
  script:
    - docker stack deploy -c ${CI_PROJECT_DIR}/${STACK_FILE} ${STACK_NAME} --with-registry-auth
  environment:
    name: Homologacao
    url: http://myapp.com.br
  allow_failure: false

success_notification:
  <<: *notification
  stage: notification
  variables:
    LINK_ARTIFACT: "true"
  script:
    - chmod +x send.sh
    - ./send.sh success ${WEBHOOK_URL}
  when: on_success

failure_notification:
  <<: *notification
  stage: notification
  variables:
    LINK_ARTIFACT: "true"
  script:
    - chmod +x send.sh
    - ./send.sh failure ${WEBHOOK_URL}
  when: on_failure
